---
title: "PUMS Census Data Processing in R"
format: html
editor: visual
---

## A Quick Intro

The following document explores the extraction of the *Public Use Microdata Sample Census data* using the API that gives person-level data between, and including, the years 2010 and 2022.

## Now for the code to query this data.

We know we want to use the `tidyverse` package, as we've established in the ST 558 course that tibbles are easy to manipulate and format. Let's also load in the `tidycensus` package, which works with this Census API. The `jsonlite` package helps to parse JSON data. The `httr` package is used to effectively deal with URLs.

```{r loading initial libraries}
library(tidyverse)
library(tidycensus)
library(jsonlite)
library(httr)
```

Now that we have the libraries loaded, we can use the example function call and the `httr` package to 'GET' the structure of the example page.

```{r investigating the url}
url_census <- 'https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24'
census_info <- httr::GET(url_census)
str(census_info, max.level = 1)
```

Let's try creating a *helper* function, `parsing_fun`, that takes what we found from the `GET()` function and turn it into a nicely formatted tibble. We need to do some corrections with formatting, as the column names weren't initially recognized. The data we are interested in is in the `content` portion of `census_info`. The `str()` function above gives a good visual for this.

```{r helper function}

parsing_fun <- function(response) {
  parsed <- fromJSON(rawToChar(response$content))
  content_info <- as_tibble(parsed)
  colnames(content_info) <- content_info[1,]
  content_info <- content_info[-1,]
  content_info
}
```

Now, we can begin the actual creation of the function. First, let's specify the options for a few of the function arguments we will use.

```{r specify the options}
numeric_vars <- c('AGEP','GASP','GRPIP','JWAP', 'JWDP','JWMNP')
category_vars <- c('FER','HHL','HISPEED', 'JWTRNS','SCH','SCHL','SEX')
geo_vars <- c('All', 'Region', 'Division', 'State')
```

Second, we can create the single year function, `user_input`, which has default values for the first four arguments and the fifth argument is optional. We begin with the year input, where we need to ensure a valid year was entered, then the numeric, category, and geography levels are validated. The numeric variables are then converted to numeric or time values, depending on the attribute. The categorical variables are turns in to factors.

Users can specify specific Regions, Divisions, or States in the fifth (optional) argument.

Finally, the variable 'Year' is added to the output_tibble to specify which year the observation data came from. This is important when querying multiple years in the next part.

```{r single year function}


user_input <- function(x=c(2022),
                       y=c("AGEP"),
                       z=c("SEX"),
                       geo_lvl="All",
                       specs=NULL) {
  if (!all(x %in% c(2010:2022))) {
    stop('expected a number')
  }
  
  if (!all(y %in% numeric_vars)) {
    stop('expected a numeric variable from the following list: AGEP, GASP, GRPIP, JWAP, JWDP, JWMNP')
  }
  number_vars_specified <- unique(c(y, "PWGTP"))

  if (!all(z %in% category_vars)) {
    stop('expected a categorical variable from the following list: FER, HHL, HISPEED, JWTRNS, SCH, SCHL, SEX')
  }
  category_vars_specified <- z
  variable_combo <- paste(c(number_vars_specified, category_vars_specified), collapse = ',')
  if (!geo_lvl %in% geo_vars){
    stop('expected a geographical level from the following list: All, Region, Division, State')
  }
  
  url_base <- paste0('https://api.census.gov/data/', x, '/acs/acs1/pums?get=', variable_combo)
  
  if (!is.null(specs)) {
    filter <- paste0('&', names(specs), '=', specs)
    url_base <- paste0(url_base, paste(filter, collapse = ''))
  }
  response <- GET(url_base)
  
  output_tibble <- parsing_fun(response)
  
  output_tibble$PWGTP <- as.numeric(output_tibble$PWGTP) # Make sure PWGTP is read as numeric.
  
  for (i in numeric_vars) {
    if (i %in% names(output_tibble)) {
      output_tibble[[i]] <- as.numeric(output_tibble[[i]])
    }
  }
  
  time_vars <- intersect(numeric_vars, c('JWAP','JWDP'))
  
  for (i in time_vars) {
    if (i %in% names(output_tibble)) {
      output_tibble[[i]] <- as.numeric(output_tibble[[i]])+0.5 #halfway point
    }
  }
  
  for (i in category_vars) {
    if (i %in% names(output_tibble)) {
      output_tibble[[i]] <- as.factor(output_tibble[[i]])
    }
  }
  
  output_tibble$Year <- x
  
  class(output_tibble) <- c("census", class(output_tibble)) # Add a class for "census".
  
  return(output_tibble)  
}

```

Let's test how this works using a 'Default' input, where no arguments have specific values changed from the default.

```{r default testing}
default_tibble <- user_input()
default_tibble
```

The following is the testing of the single year function where the user specified 2021 as the year, AGEP and GRPIP as the numeric variables, and SEX and SCHL as the categorical variables. Here, the geography level is not specified, so it defaults to a value of 'All.'

```{r user input testing}
user_input(x = 2021,
           y = c("AGEP", "GRPIP"),
           z = c("SEX", "SCHL"))  
```

Looks good! Now, we can wrap this single year function into a `multi_year_user_input` function. The user can specify multiple years, instead of just one, and this data is combined into a tibble.

```{r multi year function}
multi_year_user_input <- function(x_multi = 2022,
                                  y = c('AGEP'),
                                  z = c('SEX'),
                                  geo_lvl = 'All',
                                  specs = NULL) {
  map_dfr(x_multi, ~ user_input(x = .x,
                                y = y,
                                z = z,
                                geo_lvl = geo_lvl,
                                specs = specs))
}
                             
```

Now, we can test this multi-year function with 2021 and 2022 data and compare it to the single year results from before of the same variables, but looking at just 2021.

```{r multi year testing}
multi_year_user_input(x_multi = c(2021, 2022),
                      y = c("AGEP", "GRPIP"),
                      z = c("SEX", "SCHL"))  
```

## Writing a Generic Function for Summarizing

Next, we can begin writing a generic summary function. For the `census` summary method, letâ€™s write a function that produces means and standard deviations for our numeric variable(s) and counts for our categorical variable(s). This function will take three arguments: the tibble with class census, the numeric variable(s) to summarize, and the categorical variable(s) to summarize. The `PWGTP` (weight) variable is the only numeric variable that the user won't be able to summarize, by default.

```{r summary function}

summary.census <- function(object, numeric_vars = NULL, category_vars = NULL) {
  # Set our default numeric (except PWGTP) and categorical variables for summarizing.
  all_numeric <- setdiff(names(object)[sapply(object, is.numeric)], "PWGTP")
  all_categorical <- names(object)[sapply(object, is.factor)]
  
  # Use the specified variable from the user or use the default if NULL response.
  num_var <- if (is.null(numeric_vars)) all_numeric else intersect(numeric_vars, all_numeric)
  cat_var <- if (is.null(category_vars)) all_categorical else intersect(category_vars, all_categorical)

  weight <- as.numeric(object$PWGTP)

  results <- list()
  
  # Create the numeric summary.
  for (var in num_var) {
    x <- as.numeric(object[[var]])
    sample_mean <- sum(x * weight, na.rm = TRUE) / sum(weight, na.rm = TRUE)
    std_dev <- sqrt(sum((x^2) * weight, na.rm = TRUE) / sum(weight, na.rm = TRUE) - sample_mean^2)

    results[[paste0("Mean_", var)]] <- sample_mean
    results[[paste0("SD_", var)]] <- std_dev
  }
  # Create the categorical summary.
  for (var in cat_var) {
    freq <- object %>%
      group_by(.data[[var]]) %>%
      summarise(weighted_count = sum(PWGTP)) %>%
      arrange(desc(weighted_count))

    results[[paste0("Counts_", var)]] <- freq
  }

  return(results)
}

```

```{r}
# Initial function test.

census_data <- user_input(x = 2022,
                          y = c("AGEP", "GRPIP"),
                          z = c("SEX", "SCHL"))

summary(census_data)

# Remove mean and sd for 'Year'
```
